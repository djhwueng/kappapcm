
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

During startup - Warning messages:
1: Setting LC_CTYPE failed, using "C" 
2: Setting LC_COLLATE failed, using "C" 
3: Setting LC_TIME failed, using "C" 
4: Setting LC_MESSAGES failed, using "C" 
5: Setting LC_MONETARY failed, using "C" 
> setwd("~/Dropbox/FCU/Teaching/Mentoring/2019Spring/ChienSanPeng/KappaShrinkRun2/")
> rm(list=ls())
> #install.packages("tidyr")
> #install.packages("pracma")
> #install.packages("SEAsic")
> 
> library(tidyr)
> library(ape)
> library(MASS)
> library(TreeSim)
Loading required package: geiger
> library(Matrix)

Attaching package: 'Matrix'

The following object is masked from 'package:tidyr':

    expand

> library(phytools)
Loading required package: maps

Attaching package: 'phytools'

The following object is masked from 'package:Matrix':

    expm

> library(phangorn)
> library(dplyr)

Attaching package: 'dplyr'

The following object is masked from 'package:MASS':

    select

The following objects are masked from 'package:stats':

    filter, lag

The following objects are masked from 'package:base':

    intersect, setdiff, setequal, union

> library(corpcor)
> library(pracma)

Attaching package: 'pracma'

The following objects are masked from 'package:phangorn':

    hadamard, midpoint

The following object is masked from 'package:phytools':

    expm

The following objects are masked from 'package:Matrix':

    expm, lu, tril, triu

> #library(SEAsic)
> 
> 
> 
> TH.cov.shrink.delta<-function(S,n,delta){
+   T<-diag(diag(S))
+   #  delta<-10^(optimize(avenegLOOL,c(-10,0),S,T,n)$minimum)
+   beta <-(1-delta)/(n-1)
+   C<-n*beta*S + delta*T
+   return(C)
+ }
> 
> Shrink.tree<-function(phy){
+   phy.vcv<-vcv(phy)
+   vcv.shrunk<-TH.cov.shrink(phy.vcv,dim(phy.vcv)[1])
+   shrunk.tree<-upgma(2*(max(vcv.shrunk)-vcv.shrunk))
+   return(shrunk.tree)
+ }
> 
> 
> Shrink.C<-function(C,delta){
+   phy.vcv<-C
+   vcv.shrunk<-TH.cov.shrink.delta(phy.vcv,dim(phy.vcv)[1],delta)
+   return(vcv.shrunk/max(vcv.shrunk))
+ }
> 
> 
> 
> # NEED to check tinytipvcv MAKE THIS MATRI POSTIVE DEFINTE
> tinytipvcv<-function(C=C,shrink=shrink){
+   #C<-C/max(C)
+   uniC<-unique(c(C))
+   secondlargest<-  sort(uniC)[(length(uniC)-1)]
+   diag(C)<-(max(C)-secondlargest)*shrink+secondlargest
+   return(C/max(C))
+   #return(C)
+ }
> 
> 
> 
> RMSD_sametrait<-function(Yset=Yset,adjC=adjC,droptipname=NULL,method=method){
+   sims<-dim(Yset)[2]
+   param.array<-array(0,c(sims,2))
+   for (i in 1:sims) {
+     y<-Yset[,i]
+     names(y)<-rownames(adjC)
+     if(!is.null(droptipname)){
+       y<-y[-which((names(y)==droptipname)) ]
+     }
+     param.array[i,]<- MLEfcn(adjC=adjC,Y=y,method=method)
+   }
+   colnames(param.array)<-c("theta","sigmasq")
+   rmsd_mu<-  sqrt(mean((param.array[,1]-mu) ,na.rm=TRUE)^2)    #sqrt(mean((param.array[,1]-mu)^2))/mean(param.array[,1],na.rm=TRUE)
+   rmsd_sigmasq <- sqrt(mean(param.array[,2]-sigmasq, na.rm=TRUE)^2)#sqrt(mean((param.array[,2]-sigmasq)^2))/mean(param.array[,2],na.rm=TRUE)
+   return( c(rmsd_mu,rmsd_sigmasq))
+ }
> 
> 
> ############# Brownian model
> MLEfcn<-function(adjC=adjC,Y=Y,method=method){
+   one=matrix(1,ncol=1,nrow=length(Y))
+   if (method=="solve"){solveM<-solve(adjC,tol=1e-100)} # HERE IS THE KEY TO AFFECT KAPPA AGAIN
+   if (method=="svd"){solveM<-svd_decom(adjC)}
+   if (method=="ginv"){solveM<-ginv(adjC,tol=1e-100)}
+   mu<-c((t(one)%*%solveM%*%Y)/(t(one)%*%solveM%*%one))
+   Y<-Y-mu
+   sigma_sq<-c((t(Y)%*%solveM%*%Y)/length(Y))
+   return(c(mu,abs(sigma_sq)))
+ }
> 
> # Idea simlates trees
> 
> simsTree<-100# that means repeat 100 times
> treesize<-100 # 100, 500, 800
> simtrait<-50 # 50 traits
> Yset<-array(0,c(treesize,simtrait))
> mu<-10 # or mu <- 10
> sigmasq<-5# sigmasq<- 5
> 
> savename<-paste("unsolshrinksize",treesize,"mu",mu,"sigmasq",sigmasq,".rda",sep="")
> savename
[1] "unsolshrinksize100mu10sigmasq5.rda"
> 
> delta.array<- c(0.001,0.005,0.01,1)
> #solve_raw_RMSD_combined<-NULL
> for(deltaIndex in 1:length(delta.array)){
+   print(deltaIndex)
+   delta<-delta.array[deltaIndex]
+   #solve_raw_RMSD<-NULL
+   
+   unsolve_shrink_RMSD<-NULL
+   for(treeIndex in 1:simsTree){
+     print(treeIndex)
+     brith_lambda=runif(1,0.01,0.1)
+     death_mu=runif(1,0,brith_lambda)
+     tree<-sim.bd.taxa(n=treesize,numbsim=1,lambda=brith_lambda,mu=death_mu,complete = FALSE, stochsampling = TRUE)[[1]]
+     C<-vcv(tree)
+     C<-C/max(C)
+     kappaC<-kappa(C)
+     shrink.tol<- runif(1, min=1e-15, max=5e-13)
+     C <-  tinytipvcv(C=vcv(tree),shrink=shrink.tol) # Bad Tree we use a very bad tree to simulate data, as expected parameter estimate will be bad. so adjust tree will lead a better estimate. need to determine the bound for the tree.
+     #print(kappa(C))  
+     one<-array(1,c(dim(C)[1],1))
+     for (simtraitIndex in 1:simtrait) {
+       Yset[,simtraitIndex]<- mvrnorm(n = 1, mu*one, Sigma=sigmasq*C, tol = 1e-10, empirical = FALSE, EISPACK = FALSE)
+     }
+     #try(solve_raw_RMSD<-rbind(solve_raw_RMSD,RMSD_sametrait(Yset=Yset, adjC=C, droptipname=NULL, method="solve")))
+     C<-Shrink.C(C,delta)
+     try(unsolve_shrink_RMSD<-rbind(unsolve_shrink_RMSD,RMSD_sametrait(Yset=Yset, adjC=C, droptipname=NULL, method="solve")))
+   }
+   # solve_raw_RMSD_combined<-rbind(solve_raw_RMSD_combined,solve_raw_RMSD)
+   assign(paste("unsolve_shrink_RMSD_delta",delta,sep=""),unsolve_shrink_RMSD)
+   save.image(savename)
+ }
[1] 1
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 2
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 3
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
[1] 4
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 6
[1] 7
[1] 8
[1] 9
[1] 10
[1] 11
[1] 12
[1] 13
[1] 14
[1] 15
[1] 16
[1] 17
[1] 18
[1] 19
[1] 20
[1] 21
[1] 22
[1] 23
[1] 24
[1] 25
[1] 26
[1] 27
[1] 28
[1] 29
[1] 30
[1] 31
[1] 32
[1] 33
[1] 34
[1] 35
[1] 36
[1] 37
[1] 38
[1] 39
[1] 40
[1] 41
[1] 42
[1] 43
[1] 44
[1] 45
[1] 46
[1] 47
[1] 48
[1] 49
[1] 50
[1] 51
[1] 52
[1] 53
[1] 54
[1] 55
[1] 56
[1] 57
[1] 58
[1] 59
[1] 60
[1] 61
[1] 62
[1] 63
[1] 64
[1] 65
[1] 66
[1] 67
[1] 68
[1] 69
[1] 70
[1] 71
[1] 72
[1] 73
[1] 74
[1] 75
[1] 76
[1] 77
[1] 78
[1] 79
[1] 80
[1] 81
[1] 82
[1] 83
[1] 84
[1] 85
[1] 86
[1] 87
[1] 88
[1] 89
[1] 90
[1] 91
[1] 92
[1] 93
[1] 94
[1] 95
[1] 96
[1] 97
[1] 98
[1] 99
[1] 100
> 
> 
> 
> 
> proc.time()
   user  system elapsed 
118.327  11.401 229.566 
